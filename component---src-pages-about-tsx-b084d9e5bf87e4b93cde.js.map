{"version":3,"file":"component---src-pages-about-tsx-b084d9e5bf87e4b93cde.js","mappings":"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","sources":["webpack://gatsby-blog/./src/components/header.tsx","webpack://gatsby-blog/./src/themes/theme.ts","webpack://gatsby-blog/./src/components/theme.tsx","webpack://gatsby-blog/./src/components/layout.tsx","webpack://gatsby-blog/./src/components/seo.tsx","webpack://gatsby-blog/./src/pages/about.tsx"],"sourcesContent":["import { graphql, Link, useStaticQuery } from 'gatsby';\r\nimport React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { globalHistory } from '@reach/router';\r\nimport { StaticImage } from 'gatsby-plugin-image';\r\n\r\ninterface IData {\r\n  site: {\r\n    siteMetadata: {\r\n      title: string;\r\n      navigation: {\r\n        name: string;\r\n        url: string;\r\n      }[];\r\n    };\r\n  };\r\n}\r\n\r\nconst SiteTitle = styled.h1`\r\n  font-size: 2rem;\r\n  color: gray;\r\n  font-weight: 700;\r\n  margin: 1rem auto 1rem 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst SiteTitleLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: gray;\r\n  font-family: var(--main-font);\r\n`;\r\n\r\nconst SiteLogo = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-right: 7px;\r\n`;\r\n\r\nconst NavLinks = styled.ul`\r\n  display: flex;\r\n  list-style: none;\r\n  padding-left: 0;\r\n`;\r\n\r\nconst NavItem = styled.li`\r\n  margin: 0 2rem 0 0;\r\n  &:first-child {\r\n    padding-left: 0;\r\n  }\r\n  &::after {\r\n    content: '|';\r\n    margin: 0 0 0 2rem;\r\n    white-space: pre;\r\n    color: var(--font-color);\r\n    pointer-events: none;\r\n  }\r\n  /* &:last-child::after {\r\n    content: '';\r\n  } */\r\n`;\r\n\r\nconst NavLink = styled(Link)<{ to: string; path?: string }>`\r\n  color: ${(props) =>\r\n    props.path === props.to ? 'var(--font-color)' : 'var(--primary-color)'};\r\n  font-family: var(--main-font);\r\n  /* padding-right: 2rem;\r\n  padding-left: 2rem; */\r\n  text-decoration: none;\r\n`;\r\n\r\nconst HeaderElement = styled.div`\r\n  border-bottom: 1px solid var(--border-color);\r\n  position: sticky;\r\n  width: 100%;\r\n  top: 0;\r\n  z-index: 2;\r\n`;\r\n\r\nconst HeaderLinks = styled.header`\r\n  margin: auto;\r\n  max-width: 1000px;\r\n  margin-top: 1rem;\r\n  display: flex;\r\n  align-content: center;\r\n  flex-direction: row;\r\n  background-color: var(--background-color);\r\n  z-index: 1;\r\n  /* justify-content: space-between; */\r\n  align-items: baseline;\r\n`;\r\n\r\nconst ToggleColorTheme = styled.div`\r\n  font-family: var(--main-font);\r\n  width: 2em;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Header = () => {\r\n  const [colorTheme, setColorTheme] = useState<string>('dark');\r\n  useEffect(() => {\r\n    setColorTheme(localStorage.getItem('mode') || 'dark');\r\n    document.body.className =\r\n      (localStorage.getItem('mode') || 'light') + '-mode';\r\n  }, [colorTheme]);\r\n  const toggle = () => {\r\n    const mode = localStorage.getItem('mode') || 'light';\r\n    if (mode === 'light') {\r\n      localStorage.setItem('mode', 'dark');\r\n      setColorTheme('dark');\r\n      document.body.className = 'dark-mode';\r\n    } else if (mode === 'dark') {\r\n      localStorage.setItem('mode', 'light');\r\n      setColorTheme('light');\r\n      document.body.className = 'light-mode';\r\n    }\r\n  };\r\n\r\n  const data: IData = useStaticQuery(graphql`\r\n    query HeaderQuery {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          navigation {\r\n            name\r\n            url\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  return (\r\n    <HeaderElement>\r\n      <HeaderLinks>\r\n        <SiteTitle>\r\n          <SiteLogo to=\"/\">\r\n            <img src=\"/lotus.png\" alt=\"icon\" width={40} />\r\n          </SiteLogo>\r\n          <SiteTitleLink to=\"/\">{data.site.siteMetadata.title}</SiteTitleLink>\r\n        </SiteTitle>\r\n        <nav>\r\n          <NavLinks>\r\n            {data.site.siteMetadata.navigation.map((item, i) => (\r\n              <NavItem key={i}>\r\n                <NavLink to={item.url} path={globalHistory.location.pathname}>\r\n                  {item.name}\r\n                </NavLink>\r\n              </NavItem>\r\n            ))}\r\n          </NavLinks>\r\n        </nav>\r\n        <ToggleColorTheme onClick={toggle}>\r\n          {colorTheme === 'dark' ? 'Dark' : 'Light'}\r\n        </ToggleColorTheme>\r\n      </HeaderLinks>\r\n    </HeaderElement>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export default {\r\n  fonts: {\r\n    main: 'Noto Sans KR, Noto Sans CJK KR, arial, 돋움, Dotum, Tahoma, Geneva, sans-serif',\r\n    code: 'Source Code Pro, monospace',\r\n  },\r\n  colors: {\r\n    light: {\r\n      text: 'black',\r\n      content: '#555555',\r\n      link: '#a143e1',\r\n      background: '#f0f0f0',\r\n      border: 'black',\r\n      primary: 'gray',\r\n      heading: 'black',\r\n      button: 'white',\r\n    },\r\n    dark: {\r\n      text: 'white',\r\n      content: '#bbbbbb',\r\n      link: '#9f64b5',\r\n      background: '#222222',\r\n      border: '#eeeeee',\r\n      primary: 'gray',\r\n      heading: 'white',\r\n      button: '#444444',\r\n    },\r\n  },\r\n};\r\n","import React from 'react';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport '../themes/prism-dracula.css';\r\nimport { HeadFC } from 'gatsby';\r\nimport Font from './fonts';\r\n\r\nconst Style = styled.div<{\r\n  fonts: { main: string; code: string };\r\n  colors: {\r\n    light: { text: string; background: string; border: string };\r\n    dark: { text: string; background: string; border: string };\r\n  };\r\n}>`\r\n  margin: 0;\r\n  color: var(--font-color);\r\n  background: var(--background-color);\r\n  /* padding-left: calc(100vw - 100%); */\r\n  /* height: 100%; */\r\n`;\r\n\r\ninterface IColorTheme {\r\n  text: string;\r\n  content: string;\r\n  link: string;\r\n  background: string;\r\n  border: string;\r\n  primary: string;\r\n  heading: string;\r\n  button: string;\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle<{\r\n  fonts: { main: string; code: string };\r\n  colors: {\r\n    light: IColorTheme;\r\n    dark: IColorTheme;\r\n  };\r\n}>`\r\n  :root {\r\n    \r\n    --main-font: ${(props) => props.fonts.main};\r\n    --code-font: ${(props) => props.fonts.code};\r\n  }\r\n  .light-mode {\r\n    --font-color: ${(props) => props.colors.light.text};\r\n    --content-color: ${(props) => props.colors.light.content};\r\n    --link-color: ${(props) => props.colors.light.link};\r\n    --background-color: ${(props) => props.colors.light.background};\r\n    --border-color: ${(props) => props.colors.light.border};\r\n    --primary-color: ${(props) => props.colors.light.primary};\r\n    --heading-color: ${(props) => props.colors.light.heading};\r\n    --button-color: ${(props) => props.colors.light.button};\r\n  }\r\n  .dark-mode {\r\n    --font-color: ${(props) => props.colors.dark.text};\r\n    --content-color: ${(props) => props.colors.dark.content};\r\n    --link-color: ${(props) => props.colors.dark.link};\r\n    --background-color: ${(props) => props.colors.dark.background};\r\n    --border-color: ${(props) => props.colors.dark.border};  \r\n    --primary-color: ${(props) => props.colors.dark.primary};\r\n    --heading-color: ${(props) => props.colors.dark.heading};\r\n    --button-color: ${(props) => props.colors.dark.button};\r\n  }\r\n  body {\r\n    margin: 0;\r\n    background-color: var(--background-color);\r\n  }\r\n  html{\r\n  }\r\n`;\r\n\r\nconst Theme: React.FC<{\r\n  theme: any;\r\n  children: React.ReactNode;\r\n}> = ({ theme, children }) => {\r\n  const windowGlobal: any = typeof window !== 'undefined' && window;\r\n  const mode = windowGlobal.localStorage.getItem('mode') || 'light';\r\n  document.body.className = mode + '-mode';\r\n  return (\r\n    <Style {...theme}>\r\n      <GlobalStyle {...theme} />\r\n      {children}\r\n    </Style>\r\n  );\r\n};\r\n\r\n// export const Head: HeadFC = () => <Font fonts={} />;\r\n\r\nexport default Theme;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from './header';\r\nimport theme from '../themes/theme';\r\nimport Theme from './theme';\r\n\r\ninterface DataProps {\r\n  pageTitle: string;\r\n  maxWidth?: number;\r\n  aside?: { node: React.FC<any>; props: Object };\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin: auto;\r\n  /* max-width: 1000px; */\r\n  min-height: 100vh;\r\n  /* height: 3000vh; */\r\n`;\r\n\r\nconst Heading = styled.h1`\r\n  color: var(--font-color);\r\n  font-family: var(--main-font);\r\n`;\r\n\r\nconst Main = styled.main<{ maxWidth?: number }>`\r\n  max-width: ${(props) => props.maxWidth ?? '1000'}px;\r\n  margin: auto;\r\n  font-family: var(--main-font);\r\n`;\r\n\r\nconst Layout: React.FC<DataProps> = ({\r\n  pageTitle,\r\n  maxWidth,\r\n  aside,\r\n  children,\r\n}) => {\r\n  return (\r\n    <Theme theme={theme}>\r\n      <Container>\r\n        <Header />\r\n        <Main maxWidth={maxWidth}>\r\n          <Heading>{pageTitle}</Heading>\r\n          {children}\r\n        </Main>\r\n        {aside && <aside.node {...aside.props} />}\r\n      </Container>\r\n    </Theme>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import * as React from 'react';\r\nimport { graphql, useStaticQuery, HeadFC } from 'gatsby';\r\n\r\nconst Seo: React.FC<{ title: string }> = ({ title }) => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  return (\r\n    <title>\r\n      {title} - {data.site.siteMetadata.title}\r\n    </title>\r\n  );\r\n};\r\n\r\nexport default Seo;\r\n","import { HeadFC } from 'gatsby';\r\nimport React from 'react';\r\nimport Layout from '../components/layout';\r\nimport Seo from '../components/seo';\r\n\r\nconst AboutPage = () => {\r\n  return (\r\n    <Layout pageTitle=\"About Me\">\r\n      <p>\r\n        Hi there! I'm the proud creator of this site, which I built with Gatsby.\r\n      </p>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const Head: HeadFC = () => <Seo title=\"About Me\" />;\r\n\r\nexport default AboutPage;\r\n"],"names":["SiteTitle","styled","SiteTitleLink","Link","withConfig","SiteLogo","NavLinks","NavItem","NavLink","props","path","to","HeaderElement","HeaderLinks","ToggleColorTheme","useState","colorTheme","setColorTheme","useEffect","localStorage","getItem","document","body","className","data","useStaticQuery","React","src","alt","width","site","siteMetadata","title","navigation","map","item","i","key","url","globalHistory","name","onClick","mode","setItem","fonts","main","code","colors","light","text","content","link","background","border","primary","heading","button","dark","Style","displayName","componentId","GlobalStyle","createGlobalStyle","theme","children","window","Container","Heading","Main","maxWidth","pageTitle","aside","Theme","Header","node","Head","Seo","Layout"],"sourceRoot":""}