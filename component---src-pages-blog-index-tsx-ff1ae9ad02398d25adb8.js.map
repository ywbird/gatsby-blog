{"version":3,"file":"component---src-pages-blog-index-tsx-ff1ae9ad02398d25adb8.js","mappings":"qPAaMA,GAAeC,EAAAA,EAAAA,SAAOC,EAAAA,IAAVC,WAAA,kEAAGF,CAAH,8DASZG,EAAOH,EAAAA,QAAAA,QAAAA,WAAH,0DAAGA,CAAH,kOAeJI,EAAcJ,EAAAA,QAAAA,IAAAA,WAAH,iEAAGA,CAAH,qGAGN,SAACK,GAAD,OAAYA,EAAMC,MAAQ,MAAQ,KAH5B,IAYXC,EAAUP,EAAAA,QAAAA,EAAAA,WAAH,6DAAGA,CAAH,kJAUPQ,EAASR,EAAAA,QAAAA,EAAAA,WAAH,4DAAGA,CAAH,mBA4BZ,EAxB0C,SAAC,GAMpC,IALLS,EAKI,EALJA,KACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,QACAC,EACI,EADJA,MAEMP,GAAsCQ,EAAAA,EAAAA,GAASD,GACrD,OACEE,EAAAA,cAACZ,EAAD,KACEY,EAAAA,cAACd,EAAAA,GAAD,CAAMe,GAAE,SAAWP,GAChBH,GAASS,EAAAA,cAACE,EAAAA,EAAD,CAAaX,MAAOA,EAAOY,IAAI,iBAE3CH,EAAAA,cAACX,EAAD,CAAaE,QAASA,GACpBS,EAAAA,cAAChB,EAAD,CAAciB,GAAE,SAAWP,GACzBM,EAAAA,cAAAA,KAAAA,KAAKL,GACLK,EAAAA,cAACP,EAAD,gBAAiBG,GACjBI,EAAAA,cAACR,EAAD,KAAUK,KAjBpB,ECpCMO,EAAWnB,EAAAA,QAAAA,IAAAA,WAAH,CAAAoB,YAAAA,iBAAAC,YAAAA,gBAAGrB,CAAH,4EA6BDsB,EAAO,kBAAMP,EAAAA,cAACQ,EAAAA,EAAD,CAAKb,MAAM,iBAA9B,EAEP,EAxBiB,SAAC,GAAmC,IAAjCc,EAAiC,EAAjCA,KAClB,OACET,EAAAA,cAACU,EAAAA,EAAD,CAAQC,UAAU,IAChBX,EAAAA,cAACI,EAAD,KACGK,EAAKG,OAAOC,MAAMC,KAAI,SAACC,GAAD,eACrBf,EAAAA,cAACgB,EAAD,CACEC,IAAKF,EAAKG,GACVxB,KAAMqB,EAAKI,YAAYzB,KACvBC,MAAOoB,EAAKI,YAAYxB,MACxBC,KAAMmB,EAAKI,YAAYvB,KACvBC,QAASkB,EAAKI,YAAYC,YAC1BtB,MAAK,oBACHiB,EAAKI,YAAYrB,aADd,aACHuB,EAAwBC,gBAAgBC,uBADrC,aAEHC,GATL,KAJT,C","sources":["webpack://gatsby-blog/./src/components/postCard.tsx","webpack://gatsby-blog/./src/pages/blog/index.tsx"],"sourcesContent":["import { Link } from 'gatsby';\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PostCardProps {\r\n  slug: string;\r\n  title: string;\r\n  date: string;\r\n  excerpt: string;\r\n  cover: IGatsbyImageData;\r\n}\r\n\r\nconst PostLinkItem = styled(Link)`\r\n  color: black;\r\n  text-decoration: none;\r\n  /* padding: 0.3em; */\r\n  &:visited {\r\n    color: black;\r\n  }\r\n`;\r\n\r\nconst Card = styled.article`\r\n  width: 450px;\r\n  height: 200px;\r\n  margin: 1em;\r\n  border: 1px solid black;\r\n  transition: 0.2s cubic-bezier(0.075, 0.82, 0.165, 1);\r\n  display: flex;\r\n  flex-direction: row;\r\n  box-shadow: 7px 7px 0px 0px rgba(0, 0, 0, 1);\r\n  &:hover {\r\n    /* box-shadow: 15px 15px 0px 0px rgba(0, 0, 0, 1); */\r\n    transform: translate(0px, -5px);\r\n  }\r\n`;\r\n\r\nconst Frontmatter = styled.div<{ image?: boolean }>`\r\n  padding: 0 0.5em;\r\n  border-left: 1px solid black;\r\n  width: ${(props) => (props.image ? '230' : '450')}px;\r\n\r\n  h2 {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 1.3em;\r\n  }\r\n`;\r\n\r\nconst Excerpt = styled.p`\r\n  overflow: hidden;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 6;\r\n  -moz-box-orient: vertical;\r\n  -webkit-box-orient: vertical;\r\n  height: 130px;\r\n  margin: 0px 0 0 0;\r\n`;\r\n\r\nconst Posted = styled.p`\r\n  margin: 8px 0;\r\n`;\r\n\r\nconst PostCard: React.FC<PostCardProps> = ({\r\n  slug,\r\n  title,\r\n  date,\r\n  excerpt,\r\n  cover,\r\n}) => {\r\n  const image: IGatsbyImageData | undefined = getImage(cover);\r\n  return (\r\n    <Card>\r\n      <Link to={`/blog/${slug}`}>\r\n        {image && <GatsbyImage image={image} alt=\"cover image\" />}\r\n      </Link>\r\n      <Frontmatter image={!!image}>\r\n        <PostLinkItem to={`/blog/${slug}`}>\r\n          <h2>{title}</h2>\r\n          <Posted>Posted: {date}</Posted>\r\n          <Excerpt>{excerpt}</Excerpt>\r\n        </PostLinkItem>\r\n      </Frontmatter>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","import * as React from 'react';\r\nimport { Link, graphql, PageProps } from 'gatsby';\r\nimport Layout from '../../components/layout';\r\nimport Seo from '../../components/seo';\r\nimport PostCard from '../../components/postCard';\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport styled from 'styled-components';\r\n\r\ninterface DataProps {\r\n  allMdx: {\r\n    nodes: {\r\n      frontmatter: {\r\n        title: string;\r\n        slug: string;\r\n        date: `${string} ${number}, ${number}`;\r\n        description: string;\r\n        cover: {\r\n          childImageSharp: {\r\n            gatsbyImageData: IGatsbyImageData;\r\n          };\r\n        };\r\n      };\r\n      id: string;\r\n    }[];\r\n  };\r\n}\r\n\r\nconst PostList = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nconst BlogPage = ({ data }: PageProps<DataProps>) => {\r\n  return (\r\n    <Layout pageTitle=\"\">\r\n      <PostList>\r\n        {data.allMdx.nodes.map((node) => (\r\n          <PostCard\r\n            key={node.id}\r\n            slug={node.frontmatter.slug}\r\n            title={node.frontmatter.title}\r\n            date={node.frontmatter.date}\r\n            excerpt={node.frontmatter.description}\r\n            cover={\r\n              node.frontmatter.cover?.childImageSharp.gatsbyImageData ??\r\n              undefined\r\n            }\r\n          />\r\n        ))}\r\n      </PostList>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const Head = () => <Seo title=\"My Blog Posts\" />;\r\n\r\nexport default BlogPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query MyQuery {\r\n    allMdx(sort: { order: DESC, fields: frontmatter___date }) {\r\n      nodes {\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"MMM D, YYYY\")\r\n          slug\r\n          description\r\n          cover {\r\n            childImageSharp {\r\n              gatsbyImageData(width: 200, height: 200)\r\n            }\r\n          }\r\n        }\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["PostLinkItem","styled","Link","withConfig","Card","Frontmatter","props","image","Excerpt","Posted","slug","title","date","excerpt","cover","getImage","React","to","GatsbyImage","alt","PostList","displayName","componentId","Head","Seo","data","Layout","pageTitle","allMdx","nodes","map","node","PostCard","key","id","frontmatter","description","_node$frontmatter$cov2","childImageSharp","gatsbyImageData","undefined"],"sourceRoot":""}