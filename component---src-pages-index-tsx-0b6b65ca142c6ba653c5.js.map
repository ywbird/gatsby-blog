{"version":3,"file":"component---src-pages-index-tsx-0b6b65ca142c6ba653c5.js","mappings":"2HAsBA,IAhBqCA,IAAe,IAAd,KAAEC,GAAM,EAC5C,MACEC,aAAa,MAAEC,GAAO,QACtBC,EACAC,QAAQ,KAAEC,IACRL,EACJ,OACEM,EAAAA,EAAAA,KAAAA,UAAAA,CAASC,UAAU,YAAW,UAC5BC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAIL,EAAK,WACbC,EAAAA,EAAAA,KAAAA,KAAAA,CAAIC,UAAU,kBAAiB,SAAEL,KACjCI,EAAAA,EAAAA,KAAAA,IAAAA,CAAGC,UAAU,oBAAmB,SAAEJ,QAE5B,C,mECqDd,IA5D4BJ,IAAgB,IAAf,MAAEY,GAAO,EACpC,MAAM,EAACC,EAAK,EAACC,IAAWC,EAAAA,EAAAA,WAAQ,OAAcH,EAAMI,MAAM,EAAG,OAEvD,EAACC,EAAS,EAACC,IAAeH,EAAAA,EAAAA,WAAS,IAEnC,EAACI,EAAQ,EAACC,IAAcL,EAAAA,EAAAA,UAASH,EAAMS,OAAS,IAEhDC,GAAUC,EAAAA,EAAAA,QAA8B,MAExCC,EAAgDC,IACrCA,EAAS,GACbC,gBACTR,GAAY,EACd,EAiCF,OA9BAS,EAAAA,EAAAA,YAAU,KACR,MAKMC,EAAW,IAAIC,qBAAqBL,EAL1B,CACdM,KAAM,KACNC,WAAW,OACXC,UAAW,IAGTV,EAAQW,SACVL,EAASM,QAAQZ,EAAQW,QAC3B,GACC,KAEHN,EAAAA,EAAAA,YAAU,KACR,GAAIV,GAAYE,EAAS,CACvB,MAAMgB,EAAgBtB,EAAKQ,OAErBe,EADSD,EAAgBvB,EAAMS,OAEjCT,EAAMI,MAAMmB,EAAeA,EAAgB,IAC3C,GACJrB,EAAQ,GAAD,eAAKD,IAAI,OAAKuB,KACrBlB,GAAY,EACd,IACC,CAACD,EAAUE,KAGdQ,EAAAA,EAAAA,YAAU,KACR,MAAMU,EAASxB,EAAKQ,OAAST,EAAMS,OACnCD,EAAWiB,EAAO,GACjB,CAACxB,KAGFJ,EAAAA,EAAAA,MAAAA,MAAAA,CAAKD,UAAU,YAAW,WACxBD,EAAAA,EAAAA,KAAAA,MAAAA,CAAKC,UAAU,YAAW,SACvBK,EAAKyB,KAAKrC,IACTM,EAAAA,EAAAA,KAACgC,EAAAA,EAAO,CAAetC,KAAMA,GAAfA,EAAKuC,SAGvBjC,EAAAA,EAAAA,KAAAA,MAAAA,CAAKC,UAAU,YAAYiC,IAAKnB,EAAQ,SACrCH,GAAUZ,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,SAAAA,gBAAoBA,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,SAAAA,sBAE7B,C,mGCvDV,MAUamC,EAAO,KAAMnC,EAAAA,EAAAA,KAAAA,QAAAA,CAAAoC,SAAAA,cAE1B,UAZkB3C,IAAmC,IAAlC,KAAE4C,GAA2B,EAC9C,MAAMhC,EAAQgC,aAAI,EAAJA,EAAMC,kBAAkBC,MAEtC,OACEvC,EAAAA,EAAAA,KAACwC,EAAAA,EAAM,CAACC,UAAU,YAAYC,EAAE,OAAMN,UACpCpC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAQ,CAACtC,MAAOA,KACV,C","sources":["webpack://lotus/./src/components/article/index.tsx","webpack://lotus/./src/components/postList/index.tsx","webpack://lotus/./src/pages/index.tsx"],"sourcesContent":["import { IPost } from '@/global';\nimport { Link } from 'gatsby';\nimport { FC } from 'react';\n\nimport './article.scss';\n\nconst Article: FC<{ post: IPost }> = ({ post }) => {\n  const {\n    frontmatter: { title },\n    excerpt,\n    fields: { slug },\n  } = post;\n  return (\n    <article className=\"post-card\">\n      <Link to={slug}>\n        <h2 className=\"post-card-title\">{title}</h2>\n        <p className=\"post-card-excerpt\">{excerpt}</p>\n      </Link>\n    </article>\n  );\n};\n\nexport default Article;\n","import { IPost } from '@/global';\nimport { useState, useEffect, useRef, FC } from 'react';\n\nimport Article from '../article';\n\nimport './postList.scss';\n\ninterface props {\n  posts: IPost[];\n}\n\nconst PostList: FC<props> = ({ posts }) => {\n  const [list, setList] = useState<IPost[]>([...posts.slice(0, 10)]);\n\n  const [loadMore, setLoadMore] = useState(false);\n\n  const [hasMore, setHasMore] = useState(posts.length > 10);\n\n  const loadRef = useRef<HTMLDivElement | null>(null);\n\n  const handleObserver: IntersectionObserverCallback = (entities) => {\n    const target = entities[0];\n    if (target.isIntersecting) {\n      setLoadMore(true);\n    }\n  };\n\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: `20px`,\n      threshold: 1.0,\n    };\n    const observer = new IntersectionObserver(handleObserver, options);\n    if (loadRef.current) {\n      observer.observe(loadRef.current);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (loadMore && hasMore) {\n      const currentLength = list.length;\n      const isMore = currentLength < posts.length;\n      const nextResults = isMore\n        ? posts.slice(currentLength, currentLength + 10)\n        : [];\n      setList([...list, ...nextResults]);\n      setLoadMore(false);\n    }\n  }, [loadMore, hasMore]); //eslint-disable-line\n\n  // Check if there is more\n  useEffect(() => {\n    const isMore = list.length < posts.length;\n    setHasMore(isMore);\n  }, [list]); //eslint-disable-line\n\n  return (\n    <div className=\"post-list\">\n      <div className=\"post-grid\">\n        {list.map((post) => (\n          <Article key={post.id} post={post} />\n        ))}\n      </div>\n      <div className=\"condition\" ref={loadRef}>\n        {hasMore ? <p>Loading...</p> : <p>No more posts</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default PostList;\n","import { graphql, PageProps } from 'gatsby';\n\nimport PostList from '@/components/postList';\nimport Layout from '@/components/layout';\nimport { IPost } from '@/global';\n\ninterface DataType {\n  allMarkdownRemark: {\n    nodes: IPost[];\n  };\n}\n\nconst IndexPage = ({ data }: PageProps<DataType>) => {\n  const posts = data?.allMarkdownRemark.nodes;\n\n  return (\n    <Layout pageTitle=\"Home Page\" w=\"wide\">\n      <PostList posts={posts} />\n    </Layout>\n  );\n};\n\nexport const Head = () => <title>Home Page</title>;\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query IndexPage {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        id\n        frontmatter {\n          title\n        }\n        excerpt\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","post","frontmatter","title","excerpt","fields","slug","_jsx","className","_jsxs","Link","to","posts","list","setList","useState","slice","loadMore","setLoadMore","hasMore","setHasMore","length","loadRef","useRef","handleObserver","entities","isIntersecting","useEffect","observer","IntersectionObserver","root","rootMargin","threshold","current","observe","currentLength","nextResults","isMore","map","Article","id","ref","Head","children","data","allMarkdownRemark","nodes","Layout","pageTitle","w","PostList"],"sourceRoot":""}