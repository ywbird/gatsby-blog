{"version":3,"file":"component---src-pages-search-tsx-ad2eb72feaed84e71b69.js","mappings":"2HAsBA,IAhBqCA,IAAe,IAAd,KAAEC,GAAM,EAC5C,MACEC,aAAa,MAAEC,GAAO,QACtBC,EACAC,QAAQ,KAAEC,IACRL,EACJ,OACEM,EAAAA,EAAAA,KAAAA,UAAAA,CAASC,UAAU,YAAW,UAC5BC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAIL,EAAK,WACbC,EAAAA,EAAAA,KAAAA,KAAAA,CAAIC,UAAU,kBAAiB,SAAEL,KACjCI,EAAAA,EAAAA,KAAAA,IAAAA,CAAGC,UAAU,oBAAmB,SAAEJ,QAE5B,C,oFCkEd,UA1E4EJ,IAEtE,IAFuE,KAC3EY,GACD,EACC,MAAM,EAACC,EAAM,EAAEC,IAAaC,EAAAA,EAAAA,UAAkB,KAExC,EAACC,EAAI,EAAEC,IAAWF,EAAAA,EAAAA,aA+BxBG,EAAAA,EAAAA,YAAU,KACR,MAAMC,GACJZ,EAAAA,EAAAA,KAAAA,MAAAA,CAAKC,UAAU,gBAAeY,SAC3BP,EAAOQ,OAAS,EACfR,EAAOS,KAAI,CAACC,EAAGC,KAAMjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAO,CAASxB,KAAMsB,GAATC,MAEnCjB,EAAAA,EAAAA,KAAAA,MAAAA,CAAKC,UAAU,YAAWY,SAAAA,mBAIhCH,GAAQ,IAAME,GAAM,GACnB,CAACN,IAEJ,MAAMa,GAAYC,EAAAA,EAAAA,QAAgC,MAElD,OACElB,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACC,EAAE,OAAOC,UAAU,SAAQV,SAAAA,EACjCX,EAAAA,EAAAA,MAAAA,MAAAA,CAAKD,UAAU,iBAAgBY,SAAAA,EAC7Bb,EAAAA,EAAAA,KAAAA,QAAAA,CACEwB,KAAK,OACLvB,UAAU,eACVwB,SAlDUC,IAChB,MAuBMC,EAAgBtB,EAAKuB,kBAAkBC,MAAMC,QAvB7BC,IACpB,MACEC,QAAUC,MAAOC,IACfR,EACE9B,EAAQmC,EAAKpC,YAAYC,MAAMuC,cAC/BtC,EAAUkC,EAAKlC,QAAQsC,cAC7B,IAAIC,EAAiB,GACjBL,EAAKpC,YAAYyC,OACnBA,EAAOL,EAAKpC,YAAYyC,KAAKrB,KAAKsB,GAAQA,EAAIF,iBAEhD,MAAMG,EAASJ,EAAMC,cAAcI,MAAM,KAEzC,GAAc,KAAVL,EAAc,OAAO,EASzB,OAPoBI,EACjBvB,KAAKyB,GACM,KAANA,IACG5C,EAAM6C,SAASD,IAAM3C,EAAQ4C,SAASD,IAAMJ,EAAKK,SAASD,MAElEE,OAAOC,IAAY,IAANA,GAEE,IAIpBpC,GAAU,IAAMoB,GAAK,EAyBfiB,YAAY,wBACZC,IAAK1B,KAEPnB,EAAAA,EAAAA,KAAC8C,EAAAA,GAAI,CACH7C,UAAU,cACV8C,KAAK,6BACLC,QAAS,KAAM,MACI,QAAjB,EAAA7B,EAAU8B,eAAO,OAAjBC,EAAmBC,OAAO,OAI/B1C,IACM,C","sources":["webpack://lotus/./src/components/article/index.tsx","webpack://lotus/./src/pages/search.tsx"],"sourcesContent":["import { IPost } from '@/global';\r\nimport { Link } from 'gatsby';\r\nimport { FC } from 'react';\r\n\r\nimport './article.scss';\r\n\r\nconst Article: FC<{ post: IPost }> = ({ post }) => {\r\n  const {\r\n    frontmatter: { title },\r\n    excerpt,\r\n    fields: { slug },\r\n  } = post;\r\n  return (\r\n    <article className=\"post-card\">\r\n      <Link to={slug}>\r\n        <h2 className=\"post-card-title\">{title}</h2>\r\n        <p className=\"post-card-excerpt\">{excerpt}</p>\r\n      </Link>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Article;\r\n","import { useState, ChangeEvent, FC, useEffect, ReactNode, useRef } from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport Layout from '@/components/layout';\r\nimport { IPost } from '@/global';\r\nimport Article from '@/components/article';\r\n\r\nimport './styles/search.scss';\r\nimport { Icon } from '@iconify/react';\r\n\r\nconst SearchPage: FC<{ data: { allMarkdownRemark: { nodes: IPost[] } } }> = ({\r\n  data,\r\n}) => {\r\n  const [result, setResult] = useState<IPost[]>([]);\r\n\r\n  const [list, setList] = useState<ReactNode>();\r\n\r\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const SearchFilter = (node: IPost) => {\r\n      const {\r\n        target: { value: query },\r\n      } = e;\r\n      const title = node.frontmatter.title.toLowerCase();\r\n      const excerpt = node.excerpt.toLowerCase();\r\n      let tags: string[] = [];\r\n      if (node.frontmatter.tags) {\r\n        tags = node.frontmatter.tags.map((tag) => tag.toLowerCase());\r\n      }\r\n      const querys = query.toLowerCase().split(` `);\r\n\r\n      if (query === ``) return false;\r\n\r\n      const queryResult = querys\r\n        .map((q) => {\r\n          if (q === ``) return true;\r\n          return title.includes(q) || excerpt.includes(q) || tags.includes(q);\r\n        })\r\n        .every((a) => a === true);\r\n\r\n      return queryResult;\r\n    };\r\n    const temp: IPost[] = data.allMarkdownRemark.nodes.filter(SearchFilter);\r\n    // console.log(temp);\r\n    setResult(() => temp);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const posts = (\r\n      <div className=\"search-result\">\r\n        {result.length > 0 ? (\r\n          result.map((p, i) => <Article key={i} post={p} />)\r\n        ) : (\r\n          <div className=\"condition\">No result...</div>\r\n        )}\r\n      </div>\r\n    );\r\n    setList(() => posts);\r\n  }, [result]);\r\n\r\n  const searchRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  return (\r\n    <Layout w=\"wide\" pageTitle=\"Search\">\r\n      <div className=\"search-wrapper\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-input\"\r\n          onChange={onChange}\r\n          placeholder=\"Search...(title, tag)\"\r\n          ref={searchRef}\r\n        />\r\n        <Icon\r\n          className=\"search-icon\"\r\n          icon=\"fa6-solid:magnifying-glass\"\r\n          onClick={() => {\r\n            searchRef.current?.focus();\r\n          }}\r\n        />\r\n      </div>\r\n      {list}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query SearchPage {\r\n    allMarkdownRemark(\r\n      sort: { frontmatter: { date: DESC } }\r\n      filter: { frontmatter: { about: { ne: true } } }\r\n    ) {\r\n      nodes {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          tags\r\n        }\r\n        excerpt\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["_ref","post","frontmatter","title","excerpt","fields","slug","_jsx","className","_jsxs","Link","to","data","result","setResult","useState","list","setList","useEffect","posts","children","length","map","p","i","Article","searchRef","useRef","Layout","w","pageTitle","type","onChange","e","temp","allMarkdownRemark","nodes","filter","node","target","value","query","toLowerCase","tags","tag","querys","split","q","includes","every","a","placeholder","ref","Icon","icon","onClick","current","_searchRef$current","focus"],"sourceRoot":""}