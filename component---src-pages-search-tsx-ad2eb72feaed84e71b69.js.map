{"version":3,"file":"component---src-pages-search-tsx-ad2eb72feaed84e71b69.js","mappings":"2HAsBA,IAhBqCA,IAAe,IAAd,KAAEC,GAAM,EAC5C,MACEC,aAAa,MAAEC,GAAO,QACtBC,EACAC,QAAQ,KAAEC,IACRL,EACJ,OACEM,EAAAA,EAAAA,KAAAA,UAAAA,CAASC,UAAU,YAAW,UAC5BC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAIL,EAAK,WACbC,EAAAA,EAAAA,KAAAA,KAAAA,CAAIC,UAAU,kBAAiB,SAAEL,KACjCI,EAAAA,EAAAA,KAAAA,IAAAA,CAAGC,UAAU,oBAAmB,SAAEJ,QAE5B,C,oFCkEd,UA1E4EJ,IAEtE,IAFuE,KAC3EY,GACD,EACC,MAAM,EAACC,EAAM,EAAEC,IAAaC,EAAAA,EAAAA,UAAkB,KAExC,EAACC,EAAI,EAAEC,IAAWF,EAAAA,EAAAA,aA+BxBG,EAAAA,EAAAA,YAAU,KACR,MAAMC,GACJZ,EAAAA,EAAAA,KAAAA,MAAAA,CAAKC,UAAU,gBAAeY,SAC3BP,EAAOQ,OAAS,EACfR,EAAOS,KAAI,CAACC,EAAGC,KAAMjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAO,CAASxB,KAAMsB,GAATC,MAEnCjB,EAAAA,EAAAA,KAAAA,MAAAA,CAAKC,UAAU,YAAWY,SAAAA,mBAIhCH,GAAQ,IAAME,GAAM,GACnB,CAACN,IAEJ,MAAMa,GAAYC,EAAAA,EAAAA,QAAgC,MAElD,OACElB,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACC,EAAE,OAAOC,UAAU,SAAQV,SAAAA,EACjCX,EAAAA,EAAAA,MAAAA,MAAAA,CAAKD,UAAU,iBAAgBY,SAAAA,EAC7Bb,EAAAA,EAAAA,KAAAA,QAAAA,CACEwB,KAAK,OACLvB,UAAU,eACVwB,SAlDUC,IAChB,MAuBMC,EAAgBtB,EAAKuB,kBAAkBC,MAAMC,QAvB7BC,IACpB,MACEC,QAAUC,MAAOC,IACfR,EACE9B,EAAQmC,EAAKpC,YAAYC,MAAMuC,cAC/BtC,EAAUkC,EAAKlC,QAAQsC,cAC7B,IAAIC,EAAiB,GACjBL,EAAKpC,YAAYyC,OACnBA,EAAOL,EAAKpC,YAAYyC,KAAKrB,KAAKsB,GAAQA,EAAIF,iBAEhD,MAAMG,EAASJ,EAAMC,cAAcI,MAAM,KAEzC,GAAc,KAAVL,EAAc,OAAO,EASzB,OAPoBI,EACjBvB,KAAKyB,GACM,KAANA,IACG5C,EAAM6C,SAASD,IAAM3C,EAAQ4C,SAASD,IAAMJ,EAAKK,SAASD,MAElEE,OAAOC,IAAY,IAANA,GAEE,IAIpBpC,GAAU,IAAMoB,GAAK,EAyBfiB,YAAY,wBACZC,IAAK1B,KAEPnB,EAAAA,EAAAA,KAAC8C,EAAAA,GAAI,CACH7C,UAAU,cACV8C,KAAK,6BACLC,QAAS,KAAM,MACI,QAAjB,EAAA7B,EAAU8B,eAAO,OAAjBC,EAAmBC,OAAO,OAI/B1C,IACM,C","sources":["webpack://lotus/./src/components/article/index.tsx","webpack://lotus/./src/pages/search.tsx"],"sourcesContent":["import { IPost } from '@/global';\nimport { Link } from 'gatsby';\nimport { FC } from 'react';\n\nimport './article.scss';\n\nconst Article: FC<{ post: IPost }> = ({ post }) => {\n  const {\n    frontmatter: { title },\n    excerpt,\n    fields: { slug },\n  } = post;\n  return (\n    <article className=\"post-card\">\n      <Link to={slug}>\n        <h2 className=\"post-card-title\">{title}</h2>\n        <p className=\"post-card-excerpt\">{excerpt}</p>\n      </Link>\n    </article>\n  );\n};\n\nexport default Article;\n","import { useState, ChangeEvent, FC, useEffect, ReactNode, useRef } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '@/components/layout';\nimport { IPost } from '@/global';\nimport Article from '@/components/article';\n\nimport './styles/search.scss';\nimport { Icon } from '@iconify/react';\n\nconst SearchPage: FC<{ data: { allMarkdownRemark: { nodes: IPost[] } } }> = ({\n  data,\n}) => {\n  const [result, setResult] = useState<IPost[]>([]);\n\n  const [list, setList] = useState<ReactNode>();\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const SearchFilter = (node: IPost) => {\n      const {\n        target: { value: query },\n      } = e;\n      const title = node.frontmatter.title.toLowerCase();\n      const excerpt = node.excerpt.toLowerCase();\n      let tags: string[] = [];\n      if (node.frontmatter.tags) {\n        tags = node.frontmatter.tags.map((tag) => tag.toLowerCase());\n      }\n      const querys = query.toLowerCase().split(` `);\n\n      if (query === ``) return false;\n\n      const queryResult = querys\n        .map((q) => {\n          if (q === ``) return true;\n          return title.includes(q) || excerpt.includes(q) || tags.includes(q);\n        })\n        .every((a) => a === true);\n\n      return queryResult;\n    };\n    const temp: IPost[] = data.allMarkdownRemark.nodes.filter(SearchFilter);\n    // console.log(temp);\n    setResult(() => temp);\n  };\n\n  useEffect(() => {\n    const posts = (\n      <div className=\"search-result\">\n        {result.length > 0 ? (\n          result.map((p, i) => <Article key={i} post={p} />)\n        ) : (\n          <div className=\"condition\">No result...</div>\n        )}\n      </div>\n    );\n    setList(() => posts);\n  }, [result]);\n\n  const searchRef = useRef<HTMLInputElement | null>(null);\n\n  return (\n    <Layout w=\"wide\" pageTitle=\"Search\">\n      <div className=\"search-wrapper\">\n        <input\n          type=\"text\"\n          className=\"search-input\"\n          onChange={onChange}\n          placeholder=\"Search...(title, tag)\"\n          ref={searchRef}\n        />\n        <Icon\n          className=\"search-icon\"\n          icon=\"fa6-solid:magnifying-glass\"\n          onClick={() => {\n            searchRef.current?.focus();\n          }}\n        />\n      </div>\n      {list}\n    </Layout>\n  );\n};\n\nexport default SearchPage;\n\nexport const pageQuery = graphql`\n  query SearchPage {\n    allMarkdownRemark(sort: { frontmatter: { date: ASC } }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          tags\n        }\n        excerpt\n        id\n      }\n    }\n  }\n`;\n"],"names":["_ref","post","frontmatter","title","excerpt","fields","slug","_jsx","className","_jsxs","Link","to","data","result","setResult","useState","list","setList","useEffect","posts","children","length","map","p","i","Article","searchRef","useRef","Layout","w","pageTitle","type","onChange","e","temp","allMarkdownRemark","nodes","filter","node","target","value","query","toLowerCase","tags","tag","querys","split","q","includes","every","a","placeholder","ref","Icon","icon","onClick","current","_searchRef$current","focus"],"sourceRoot":""}