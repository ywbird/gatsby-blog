{"version":3,"file":"component---src-templates-posts-tsx-54b0dc70cdd0d46faf0a.js","mappings":"oKAWMA,GAAeC,EAAAA,EAAAA,SAAOC,EAAAA,MAAK,6EAAZD,CAAY,0GAS3BE,EAAOF,EAAAA,QAAAA,QAAAA,WAAc,0DAAdA,CAAc,2RAoBrBG,EAAcH,EAAAA,QAAAA,IAAAA,WAAU,iEAAVA,CAAU,8FAYxBI,EAAQJ,EAAAA,QAAAA,GAAAA,WAAS,2DAATA,CAAS,+IASjBK,EAAUL,EAAAA,QAAAA,EAAAA,WAAQ,6DAARA,CAAQ,+IASlBM,EAAON,EAAAA,QAAAA,IAAAA,WAAU,0DAAVA,CAAU,uEAqBvB,EAf0C,SAAH,GAAwC,IAAlCO,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAaC,GAAF,EAAJC,KAAa,EAAPD,SAC9D,OACEE,EAAAA,EAAAA,KAACT,EAAI,WACHS,EAAAA,EAAAA,KAACR,EAAW,WACVS,EAAAA,EAAAA,MAACb,EAAY,CAACc,GAAE,SAAWN,EAAO,WAChCI,EAAAA,EAAAA,KAACP,EAAK,UAAEI,KACRG,EAAAA,EAAAA,KAACL,EAAI,WACHK,EAAAA,EAAAA,KAACN,EAAO,UAAEI,YAMtB,EC7EMK,EAAoBd,EAAAA,QAAAA,IAAAA,WAAU,wEAAVA,CAAU,uDAM9Be,GAAiBf,EAAAA,EAAAA,SAAOC,EAAAA,MAAK,gFAAZD,CAAY,+VAoDnC,EA7BwC,SAAH,GAM9B,IAJLgB,EAAQ,EAARA,SACAC,EAAG,EAAHA,IACAC,EAAM,EAANA,OAKA,OACEP,EAAAA,EAAAA,KAACG,EAAiB,UACfK,MAAMC,KAAK,CAAEC,OAAQL,IAAYM,KAAI,SAACC,EAAGC,GAAC,OACzCb,EAAAA,EAAAA,KAACI,EAAc,CAEbF,GACEW,EAAI,IAAM,EAAC,KACHP,EAAG,OAAUA,EAAQC,EAAM,UAAaA,EAAW,MAAI,KACvDD,EAAG,OAAUA,EAAG,IAAMC,EAAM,UAAaA,EAAM,IAAM,OACvDM,EAAI,GAEX,SAEAA,EAAI,GATAA,EAUU,KAIzB,EC/CMC,EAAQzB,EAAAA,QAAAA,IAAAA,WAAU,2DAAVA,CAAU,iKA+CxB,EAnCkC,SAAH,GAQxB,IAPL0B,EAAK,EAALA,MAEAV,EAAQ,EAARA,SACAW,EAAa,EAAbA,cACAV,EAAG,EAAHA,IACAC,EAAM,EAANA,OAGA,OACEN,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EACED,EAAAA,EAAAA,KAACc,EAAK,UACHC,GACCA,EAAMJ,KAAI,SAACM,EAAMJ,GAAC,OAChBb,EAAAA,EAAAA,KAACkB,EAAQ,CAGPtB,KAAMqB,EAAKE,YAAYvB,KACvBC,MAAOoB,EAAKE,YAAYtB,MACxBE,KAAMkB,EAAKE,YAAYpB,KACvBD,QAASmB,EAAKnB,SAAW,IALpBmB,EAAKG,GAMV,WAGWC,IAAlBL,GAA+BX,GAE5BW,GAAiBX,GADnBL,EAAAA,EAAAA,KAACsB,EAAU,CAAChB,IAAKA,EAAKC,OAAQA,EAAQF,SAAUA,IAIhD,KAIR,C,+CCpBA,IAtCK,SAAH,GAA4C,IAAtCR,EAAK,EAALA,MAAOE,EAAI,EAAJA,KAAMwB,EAAW,EAAXA,YAAa3B,EAAI,EAAJA,KAC1B4B,GAAOC,EAAAA,EAAAA,gBAAe,aAc5B,OACExB,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EACEA,EAAAA,EAAAA,MAAAA,QAAAA,CAAAA,SAAAA,CACGJ,EAAK,MAAK2B,EAAKE,KAAKC,aAAa9B,UAEpCG,EAAAA,EAAAA,KAAAA,OAAAA,CAAM4B,QAAQ,WACd5B,EAAAA,EAAAA,KAAAA,OAAAA,CAAM6B,KAAK,cAAcC,QAASN,EAAKE,KAAKC,aAAaJ,eACzDvB,EAAAA,EAAAA,KAAAA,OAAAA,CAAM+B,UAAU,SAASD,QAASN,EAAKE,KAAKC,aAAaK,YACzDhC,EAAAA,EAAAA,KAAAA,OAAAA,CAAMiC,SAAS,WAAWH,QAASN,EAAKE,KAAKC,aAAaO,QAC1DlC,EAAAA,EAAAA,KAAAA,OAAAA,CAAMiC,SAAS,WAAWH,QAASjC,KACnCG,EAAAA,EAAAA,KAAAA,OAAAA,CAAMiC,SAAS,eAAeH,QAASN,EAAKE,KAAKC,aAAa9B,QAC7DE,IAAQC,EAAAA,EAAAA,KAAAA,OAAAA,CAAM6B,KAAK,OAAOC,QAAS/B,IACnCwB,IAAevB,EAAAA,EAAAA,KAAAA,OAAAA,CAAMiC,SAAS,iBAAiBH,QAASP,IACxD3B,IACCI,EAAAA,EAAAA,KAAAA,OAAAA,CACEiC,SAAS,SACTH,QAASN,EAAKE,KAAKC,aAAaQ,QAAUvC,MAKpD,C,6GCPawC,EAAO,WAAH,OAASpC,EAAAA,EAAAA,KAACqC,EAAAA,EAAG,CAACxC,MAAM,QAAS,EAE9C,UArBqB,SAAH,GAG4B,IAF5CyC,EAAW,EAAXA,YACAd,EAAI,EAAJA,KAMMe,EAAa,CACjBlC,SALmBiC,EAAbjC,UAQR,OACEL,EAAAA,EAAAA,KAACwC,EAAAA,EAAM,CAACC,UAAU,GAAEC,UAClB1C,EAAAA,EAAAA,KAAC2C,EAAAA,EAAQ,eAAC5B,MAAOS,EAAKoB,kBAAkBC,OAAWN,KAGzD,C","sources":["webpack://lotus/./src/components/postCard.tsx","webpack://lotus/./src/components/pagination.tsx","webpack://lotus/./src/components/postList.tsx","webpack://lotus/./src/components/seo.tsx","webpack://lotus/./src/templates/posts.tsx"],"sourcesContent":["import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PostCardProps {\r\n  slug: string;\r\n  title: string;\r\n  date: string;\r\n  excerpt: string;\r\n}\r\n\r\nconst PostLinkItem = styled(Link)`\r\n  color: var(--theme-ui-colors-text);\r\n  text-decoration: none;\r\n  /* padding: 0.3em; */\r\n  &:visited {\r\n    color: var(--theme-ui-colors-text);\r\n  }\r\n`;\r\n\r\nconst Card = styled.article`\r\n  /* width: 450px; */\r\n  /* height: 200px; */\r\n  /* margin: 1em; */\r\n  /* border: 2px solid var(--border-color); */\r\n\r\n  /* background-color: var(--button-color); */\r\n  border: 1px solid var(--theme-ui-colors-border);\r\n  border-radius: 4px;\r\n  transition: color 0.15s ease-out, background 0.15s ease-out,\r\n    transform 0.15s ease-out, box-shadow 0.15s ease-out, border 0.15s ease-out;\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  @media only screen and (max-device-width: 600px) {\r\n    /* height: 110px; */\r\n    /* min-width: 300px; */\r\n  }\r\n`;\r\n\r\nconst Frontmatter = styled.div`\r\n  padding: 0.2em 0.5em;\r\n  font-family: var(--main-font);\r\n  /* width: 490px; */\r\n\r\n  h2 {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 1.3em;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  display: -webkit-box;\r\n  -moz-box-orient: vertical;\r\n  -webkit-line-clamp: 4;\r\n  overflow: hidden;\r\n  word-break: break-all;\r\n  color: var(--theme-ui-colors-text);\r\n`;\r\n\r\nconst Excerpt = styled.p`\r\n  display: -webkit-box;\r\n  -moz-box-orient: vertical;\r\n  -webkit-line-clamp: 4;\r\n  overflow: hidden;\r\n  word-break: break-all;\r\n  color: var(--theme-ui-colors-mute);\r\n`;\r\n\r\nconst Data = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst PostCard: React.FC<PostCardProps> = ({ slug, title, date, excerpt }) => {\r\n  return (\r\n    <Card>\r\n      <Frontmatter>\r\n        <PostLinkItem to={`/post/${slug}`}>\r\n          <Title>{title}</Title>\r\n          <Data>\r\n            <Excerpt>{excerpt}</Excerpt>\r\n          </Data>\r\n        </PostLinkItem>\r\n      </Frontmatter>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface DataProps {\r\n  // currentPage: number;\r\n  numPages: number;\r\n  tag?: string;\r\n  series?: string;\r\n  // baseUrl?: string;\r\n}\r\n\r\nconst PagenationWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 2em 0;\r\n`;\r\n\r\nconst PagenationLink = styled(Link)`\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 0px;\r\n  /* background-color: var(--background-color); */\r\n  border-radius: 2px;\r\n  border: 1px solid var(--theme-ui-colors-border);\r\n  color: var(--theme-ui-colors-text);\r\n  text-decoration: none;\r\n  display: grid;\r\n  place-items: center;\r\n  margin: 0.15em;\r\n\r\n  &:first-child {\r\n    border-top-left-radius: 4px;\r\n    border-bottom-left-radius: 4px;\r\n  }\r\n  &:last-child {\r\n    border-top-right-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n  }\r\n`;\r\n\r\nconst Pagenation: React.FC<DataProps> = ({\r\n  // currentPage,\r\n  numPages,\r\n  tag,\r\n  series,\r\n  // baseUrl,\r\n}) => {\r\n  // const params = new URLSearchParams(document.location.search);\r\n  // const tag = params.get('tag') ?? '';\r\n  return (\r\n    <PagenationWrapper>\r\n      {Array.from({ length: numPages }).map((_, i) => (\r\n        <PagenationLink\r\n          key={i}\r\n          to={\r\n            i + 1 === 1\r\n              ? `/${tag ? `tag/${tag}` : series ? `series/${series}` : null}`\r\n              : `/${tag ? `tag/${tag}/` : series ? `series/${series}/` : null}${\r\n                  i + 1\r\n                }`\r\n          }\r\n        >\r\n          {i + 1}\r\n        </PagenationLink>\r\n      ))}\r\n    </PagenationWrapper>\r\n  );\r\n};\r\n\r\nexport default Pagenation;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PostCard from './postCard';\r\nimport Pagenation from './pagination';\r\n\r\ninterface IData {\r\n  posts?: IPost[];\r\n  // pageContext: {\r\n  //   limit: number;\r\n  //   skip: number;\r\n  //   numPages: number;\r\n  //   currentPage: number;\r\n  // };\r\n  // currentPage: number;\r\n  usePagination?: boolean;\r\n  numPages?: number;\r\n  tag?: string;\r\n  series?: string;\r\n  // baseUrl?: string;\r\n}\r\n\r\nconst Posts = styled.div`\r\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n  display: grid;\r\n  gap: 20px;\r\n  /* flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center; */\r\n  @media only screen and (max-device-width: 600px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nconst PostList: React.FC<IData> = ({\r\n  posts,\r\n  // currentPage,\r\n  numPages,\r\n  usePagination,\r\n  tag,\r\n  series,\r\n  // baseUrl,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Posts>\r\n        {posts &&\r\n          posts.map((node, i) => (\r\n            <PostCard\r\n              key={node.id}\r\n              // key={i}\r\n              slug={node.frontmatter.slug}\r\n              title={node.frontmatter.title}\r\n              date={node.frontmatter.date}\r\n              excerpt={node.excerpt || ''}\r\n            />\r\n          ))}\r\n      </Posts>\r\n      {usePagination === undefined && numPages ? (\r\n        <Pagenation tag={tag} series={series} numPages={numPages} />\r\n      ) : usePagination && numPages ? (\r\n        <Pagenation tag={tag} series={series} numPages={numPages} />\r\n      ) : (\r\n        ''\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import * as React from 'react';\r\nimport { graphql, useStaticQuery } from 'gatsby';\r\n\r\nconst Seo: React.FC<{\r\n  title: string;\r\n  date?: string;\r\n  description?: string;\r\n  slug?: string;\r\n}> = ({ title, date, description, slug }) => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          siteUrl\r\n          title\r\n          description\r\n          nickname\r\n          logo\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  return (\r\n    <>\r\n      <title>\r\n        {title} | {data.site.siteMetadata.title}\r\n      </title>\r\n      <meta charSet=\"UTF-8\" />\r\n      <meta name=\"description\" content={data.site.siteMetadata.description} />\r\n      <meta httpEquiv=\"Author\" content={data.site.siteMetadata.nickname} />\r\n      <meta property=\"og:image\" content={data.site.siteMetadata.logo} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\r\n      {date && <meta name=\"Date\" content={date} />}\r\n      {description && <meta property=\"og:description\" content={description} />}\r\n      {slug && (\r\n        <meta\r\n          property=\"og:url\"\r\n          content={data.site.siteMetadata.siteUrl + slug}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Seo;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { graphql, PageProps } from 'gatsby';\r\nimport Layout from '../components/layout';\r\nimport Seo from '../components/seo';\r\nimport PostList from '../components/postList';\r\n\r\ninterface DataProps {\r\n  allMarkdownRemark: {\r\n    nodes: IPost[];\r\n  };\r\n}\r\n\r\ninterface PageContextProps {\r\n  limit: number;\r\n  skip: number;\r\n  numPages: number;\r\n}\r\n\r\nconst CategoryPage = ({\r\n  pageContext,\r\n  data,\r\n}: PageProps<DataProps, PageContextProps>) => {\r\n  const { numPages } = pageContext;\r\n\r\n  // const [posts, setPosts] = useState<IPosts[]>([]);\r\n\r\n  const pagenation = {\r\n    numPages,\r\n  };\r\n\r\n  return (\r\n    <Layout pageTitle=\"\">\r\n      <PostList posts={data.allMarkdownRemark.nodes} {...pagenation} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const Head = () => <Seo title=\"Home\" />;\r\n\r\nexport default CategoryPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query PostsPage($limit: Int!, $skip: Int!) {\r\n    allMarkdownRemark(\r\n      limit: $limit\r\n      skip: $skip\r\n      sort: { order: DESC, fields: frontmatter___date }\r\n      filter: { frontmatter: { type: { ne: \"about\" } } }\r\n    ) {\r\n      nodes {\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"MMM D, YYYY\")\r\n          slug\r\n          tag\r\n        }\r\n        excerpt\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["PostLinkItem","styled","Link","Card","Frontmatter","Title","Excerpt","Data","slug","title","excerpt","date","_jsx","_jsxs","to","PagenationWrapper","PagenationLink","numPages","tag","series","Array","from","length","map","_","i","Posts","posts","usePagination","node","PostCard","frontmatter","id","undefined","Pagenation","description","data","useStaticQuery","site","siteMetadata","charSet","name","content","httpEquiv","nickname","property","logo","siteUrl","Head","Seo","pageContext","pagenation","Layout","pageTitle","children","PostList","allMarkdownRemark","nodes"],"sourceRoot":""}