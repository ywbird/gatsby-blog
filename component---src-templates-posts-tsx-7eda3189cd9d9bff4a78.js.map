{"version":3,"file":"component---src-templates-posts-tsx-7eda3189cd9d9bff4a78.js","mappings":"oKAYMA,GAAeC,EAAAA,EAAAA,SAAOC,EAAAA,IAAVC,WAAA,kEAAGF,CAAH,0GASZG,EAAOH,EAAAA,QAAAA,QAAAA,WAAH,0DAAGA,CAAH,gQAqBJI,EAAcJ,EAAAA,QAAAA,IAAAA,WAAH,iEAAGA,CAAH,0GAcXK,EAAUL,EAAAA,QAAAA,EAAAA,WAAH,6DAAGA,CAAH,qIASPM,EAAYN,EAAAA,QAAAA,EAAAA,WAAH,+DAAGA,CAAH,mBAITO,EAAOP,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,iGAOJQ,EAAOR,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,oFAyBV,EAlB0C,SAAC,GAAoC,IAAlCS,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC9D,OACEC,EAAAA,EAAAA,KAACV,EAAD,WACEU,EAAAA,EAAAA,KAACT,EAAD,WACEU,EAAAA,EAAAA,MAACf,EAAD,CAAcgB,GAAE,SAAWN,EAA3B,WACEI,EAAAA,EAAAA,KAAAA,KAAAA,CAAAA,SAAKH,KACLI,EAAAA,EAAAA,MAACN,EAAD,YACEK,EAAAA,EAAAA,KAACR,EAAD,UAAUO,KACVC,EAAAA,EAAAA,KAACN,EAAD,WACEM,EAAAA,EAAAA,KAACP,EAAD,UAAYK,eAT1B,ECxEMK,EAAoBhB,EAAAA,QAAAA,IAAAA,WAAH,wEAAGA,CAAH,uDAMjBiB,GAAiBjB,EAAAA,EAAAA,SAAOC,EAAAA,IAAVC,WAAA,qEAAGF,CAAH,+VAiDpB,EA1BwC,SAAC,GAKlC,IAHLkB,EAGI,EAHJA,SACAC,EAEI,EAFJA,IAKA,OACEN,EAAAA,EAAAA,KAACG,EAAD,UACGI,MAAMC,KAAK,CAAEC,OAAQJ,IAAYK,KAAI,SAACC,EAAGC,GAAJ,OACpCZ,EAAAA,EAAAA,KAACI,EAAD,CAEEF,GACEU,EAAI,IAAM,EAAVA,KACQN,EAAG,OAAUA,EAAQ,IAD7B,KAEQA,EAAG,OAAUA,EAAV,IAAmB,KAAKM,EAAI,GAL3C,SAQGA,EAAI,GAPAA,EAFR,KAVP,ECjBMC,EAAQ1B,EAAAA,QAAAA,IAAAA,WAAH,2DAAGA,CAAH,sFA6CX,EApCkC,SAAC,GAO5B,IANL2B,EAMI,EANJA,MAEAT,EAII,EAJJA,SACAU,EAGI,EAHJA,cACAT,EAEI,EAFJA,IAGA,OAEEL,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EACED,EAAAA,EAAAA,KAACa,EAAD,UACGC,GACCA,EAAMJ,KAAI,SAACM,EAAMJ,GAAP,OACRZ,EAAAA,EAAAA,KAACiB,EAAD,CAGErB,KAAMoB,EAAKE,YAAYtB,KACvBC,MAAOmB,EAAKE,YAAYrB,MACxBC,KAAMkB,EAAKE,YAAYpB,KACvBC,QAASiB,EAAKE,YAAYC,aALrBH,EAAKI,GAFd,WAWeC,IAAlBN,GAA+BV,GAE5BU,GAAiBV,GADnBL,EAAAA,EAAAA,KAACsB,EAAD,CAAYhB,IAAKA,EAAKD,SAAUA,IAIhC,KA7BR,C,6GCKakB,EAAO,kBAAMvB,EAAAA,EAAAA,KAACwB,EAAAA,EAAD,CAAK3B,MAAM,QAA9B,EAEP,UArBqB,SAAC,GAGwB,IAF5C4B,EAE4C,EAF5CA,YACAC,EAC4C,EAD5CA,KAMMC,EAAa,CACjBtB,SALmBoB,EAAbpB,UAQR,OACEL,EAAAA,EAAAA,KAAC4B,EAAAA,EAAD,CAAQC,UAAU,GAAlBC,UACE9B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAD,eAAUjB,MAAOY,EAAKM,kBAAkBC,OAAWN,KAdzD,C","sources":["webpack://lotus/./src/components/postCard.tsx","webpack://lotus/./src/components/pagination.tsx","webpack://lotus/./src/components/postList.tsx","webpack://lotus/./src/templates/posts.tsx"],"sourcesContent":["import { Link } from 'gatsby';\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PostCardProps {\r\n  slug: string;\r\n  title: string;\r\n  date: string;\r\n  excerpt: string;\r\n}\r\n\r\nconst PostLinkItem = styled(Link)`\r\n  color: var(--theme-ui-colors-text);\r\n  text-decoration: none;\r\n  /* padding: 0.3em; */\r\n  &:visited {\r\n    color: var(--theme-ui-colors-text);\r\n  }\r\n`;\r\n\r\nconst Card = styled.article`\r\n  /* width: 450px; */\r\n  height: 200px;\r\n  /* margin: 1em; */\r\n  /* border: 2px solid var(--border-color); */\r\n\r\n  /* background-color: var(--button-color); */\r\n  border: 1px solid var(--theme-ui-colors-border);\r\n  border-radius: 4px;\r\n  transition: color 0.15s ease-out, background 0.15s ease-out,\r\n    transform 0.15s ease-out, box-shadow 0.15s ease-out, border 0.15s ease-out;\r\n  display: flex;\r\n  flex-direction: row;\r\n  /* box-shadow: 5px 5px var(--border-color); */\r\n  &:hover {\r\n    /* box-shadow: 3px 3px var(--border-color); */\r\n    /* transform: translate(0px, 2px); */\r\n    /* background-color: aqua; */\r\n  }\r\n`;\r\n\r\nconst Frontmatter = styled.div<{ image?: boolean }>`\r\n  padding: 0.2em 0.5em;\r\n  /* border-left: 1px solid black; */\r\n  /* width: ${(props) => (props.image ? '230' : '450')}px; */\r\n  font-family: var(--main-font);\r\n  width: 490px;\r\n\r\n  h2 {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 1.3em;\r\n  }\r\n`;\r\n\r\nconst Excerpt = styled.p`\r\n  overflow: hidden;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 6;\r\n  -moz-box-orient: vertical;\r\n  -webkit-box-orient: vertical;\r\n  margin: 0px 0 0 0;\r\n`;\r\n\r\nconst MetaInner = styled.p`\r\n  margin: 8px 0;\r\n`;\r\n\r\nconst Meta = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  font-family: var(--main-font);\r\n`;\r\n\r\nconst Data = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: 160px;\r\n`;\r\n\r\nconst PostCard: React.FC<PostCardProps> = ({ slug, title, date, excerpt }) => {\r\n  return (\r\n    <Card>\r\n      <Frontmatter>\r\n        <PostLinkItem to={`/post/${slug}`}>\r\n          <h2>{title}</h2>\r\n          <Data>\r\n            <Excerpt>{excerpt}</Excerpt>\r\n            <Meta>\r\n              <MetaInner>{date}</MetaInner>\r\n            </Meta>\r\n          </Data>\r\n        </PostLinkItem>\r\n      </Frontmatter>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface DataProps {\r\n  // currentPage: number;\r\n  numPages: number;\r\n  tag?: string;\r\n  // baseUrl?: string;\r\n}\r\n\r\nconst PagenationWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 2em 0;\r\n`;\r\n\r\nconst PagenationLink = styled(Link)`\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 0px;\r\n  /* background-color: var(--background-color); */\r\n  border-radius: 2px;\r\n  border: 1px solid var(--theme-ui-colors-border);\r\n  color: var(--theme-ui-colors-text);\r\n  text-decoration: none;\r\n  display: grid;\r\n  place-items: center;\r\n  margin: 0.15em;\r\n\r\n  &:first-child {\r\n    border-top-left-radius: 4px;\r\n    border-bottom-left-radius: 4px;\r\n  }\r\n  &:last-child {\r\n    border-top-right-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n  }\r\n`;\r\n\r\nconst Pagenation: React.FC<DataProps> = ({\r\n  // currentPage,\r\n  numPages,\r\n  tag,\r\n  // baseUrl,\r\n}) => {\r\n  // const params = new URLSearchParams(document.location.search);\r\n  // const tag = params.get('tag') ?? '';\r\n  return (\r\n    <PagenationWrapper>\r\n      {Array.from({ length: numPages }).map((_, i) => (\r\n        <PagenationLink\r\n          key={i}\r\n          to={\r\n            i + 1 === 1\r\n              ? `/${tag ? `tag/${tag}` : ''}`\r\n              : `/${tag ? `tag/${tag}/` : ''}${i + 1}`\r\n          }\r\n        >\r\n          {i + 1}\r\n        </PagenationLink>\r\n      ))}\r\n    </PagenationWrapper>\r\n  );\r\n};\r\n\r\nexport default Pagenation;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PostCard from './postCard';\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport Layout from './layout';\r\nimport { graphql } from 'gatsby';\r\nimport Pagenation from './pagination';\r\n\r\ninterface IData {\r\n  posts?: IPost[];\r\n  // pageContext: {\r\n  //   limit: number;\r\n  //   skip: number;\r\n  //   numPages: number;\r\n  //   currentPage: number;\r\n  // };\r\n  // currentPage: number;\r\n  usePagination?: boolean;\r\n  numPages?: number;\r\n  tag?: string;\r\n  // baseUrl?: string;\r\n}\r\n\r\nconst Posts = styled.div`\r\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n  display: grid;\r\n  gap: 20px;\r\n  /* flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center; */\r\n`;\r\n\r\nconst PostList: React.FC<IData> = ({\r\n  posts,\r\n  // currentPage,\r\n  numPages,\r\n  usePagination,\r\n  tag,\r\n  // baseUrl,\r\n}) => {\r\n  return (\r\n    // <Layout pageTitle=\"\">\r\n    <>\r\n      <Posts>\r\n        {posts &&\r\n          posts.map((node, i) => (\r\n            <PostCard\r\n              key={node.id}\r\n              // key={i}\r\n              slug={node.frontmatter.slug}\r\n              title={node.frontmatter.title}\r\n              date={node.frontmatter.date}\r\n              excerpt={node.frontmatter.description}\r\n            />\r\n          ))}\r\n      </Posts>\r\n      {usePagination === undefined && numPages ? (\r\n        <Pagenation tag={tag} numPages={numPages} />\r\n      ) : usePagination && numPages ? (\r\n        <Pagenation tag={tag} numPages={numPages} />\r\n      ) : (\r\n        ''\r\n      )}\r\n    </>\r\n    // </Layout>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { graphql, PageProps } from 'gatsby';\r\nimport Layout from '../components/layout';\r\nimport Seo from '../components/seo';\r\nimport PostList from '../components/postList';\r\n\r\ninterface DataProps {\r\n  allMarkdownRemark: {\r\n    nodes: IPost[];\r\n  };\r\n}\r\n\r\ninterface PageContextProps {\r\n  limit: number;\r\n  skip: number;\r\n  numPages: number;\r\n}\r\n\r\nconst CategoryPage = ({\r\n  pageContext,\r\n  data,\r\n}: PageProps<DataProps, PageContextProps>) => {\r\n  const { numPages } = pageContext;\r\n\r\n  // const [posts, setPosts] = useState<IPosts[]>([]);\r\n\r\n  const pagenation = {\r\n    numPages,\r\n  };\r\n\r\n  return (\r\n    <Layout pageTitle=\"\">\r\n      <PostList posts={data.allMarkdownRemark.nodes} {...pagenation} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const Head = () => <Seo title=\"Home\" />;\r\n\r\nexport default CategoryPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query PostsPage($limit: Int!, $skip: Int!) {\r\n    allMarkdownRemark(\r\n      limit: $limit\r\n      skip: $skip\r\n      sort: { order: DESC, fields: frontmatter___date }\r\n    ) {\r\n      nodes {\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"MMM D, YYYY\")\r\n          slug\r\n          description\r\n          tag\r\n        }\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["PostLinkItem","styled","Link","withConfig","Card","Frontmatter","Excerpt","MetaInner","Meta","Data","slug","title","date","excerpt","_jsx","_jsxs","to","PagenationWrapper","PagenationLink","numPages","tag","Array","from","length","map","_","i","Posts","posts","usePagination","node","PostCard","frontmatter","description","id","undefined","Pagenation","Head","Seo","pageContext","data","pagenation","Layout","pageTitle","children","PostList","allMarkdownRemark","nodes"],"sourceRoot":""}