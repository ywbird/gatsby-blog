{"version":3,"file":"component---src-templates-tag-tsx-e77f87f6da247f2a46ca.js","mappings":"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","sources":["webpack://gatsby-blog/./src/components/postCard.tsx","webpack://gatsby-blog/./src/components/pagination.tsx","webpack://gatsby-blog/./src/components/postList.tsx","webpack://gatsby-blog/./src/templates/tag.tsx"],"sourcesContent":["import { Link } from 'gatsby';\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PostCardProps {\r\n  slug: string;\r\n  title: string;\r\n  date: string;\r\n  excerpt: string;\r\n  cover: IGatsbyImageData;\r\n}\r\n\r\nconst PostLinkItem = styled(Link)`\r\n  color: var(--font-color);\r\n  text-decoration: none;\r\n  /* padding: 0.3em; */\r\n  &:visited {\r\n    color: var(--font-color);\r\n  }\r\n`;\r\n\r\nconst Card = styled.article`\r\n  /* width: 450px; */\r\n  height: 200px;\r\n  /* margin: 1em; */\r\n  /* border: 2px solid var(--border-color); */\r\n\r\n  background-color: var(--button-color);\r\n  border-radius: 7px;\r\n  transition: color 0.15s ease-out, background 0.15s ease-out,\r\n    transform 0.15s ease-out, box-shadow 0.15s ease-out, border 0.15s ease-out;\r\n  display: flex;\r\n  flex-direction: row;\r\n  /* box-shadow: 5px 5px var(--border-color); */\r\n  &:hover {\r\n    /* box-shadow: 3px 3px var(--border-color); */\r\n    /* transform: translate(0px, 2px); */\r\n    /* background-color: aqua; */\r\n  }\r\n`;\r\n\r\nconst Frontmatter = styled.div<{ image?: boolean }>`\r\n  padding: 0.2em 0.5em;\r\n  /* border-left: 1px solid black; */\r\n  /* width: ${(props) => (props.image ? '230' : '450')}px; */\r\n  font-family: var(--main-font);\r\n\r\n  h2 {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 1.3em;\r\n  }\r\n`;\r\n\r\nconst Excerpt = styled.p`\r\n  overflow: hidden;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 6;\r\n  -moz-box-orient: vertical;\r\n  -webkit-box-orient: vertical;\r\n  height: 125px;\r\n  margin: 0px 0 0 0;\r\n`;\r\n\r\nconst Posted = styled.p`\r\n  margin: 8px 0;\r\n`;\r\n\r\nconst Image = styled(GatsbyImage)`\r\n  width: 200px;\r\n  border-top-left-radius: 7px;\r\n  border-bottom-left-radius: 7px;\r\n  /* border-right: 1px solid var(--border-color); */\r\n`;\r\n\r\nconst PostCard: React.FC<PostCardProps> = ({\r\n  slug,\r\n  title,\r\n  date,\r\n  excerpt,\r\n  cover,\r\n}) => {\r\n  const image: IGatsbyImageData | undefined = getImage(cover);\r\n  return (\r\n    <Card>\r\n      <Link to={`/post/${slug}`}>\r\n        {image && <Image image={image} alt=\"cover image\" />}\r\n      </Link>\r\n      <Frontmatter image={!!image}>\r\n        <PostLinkItem to={`/post/${slug}`}>\r\n          <h2>{title}</h2>\r\n          <Posted>Posted: {date}</Posted>\r\n          <Excerpt>{excerpt}</Excerpt>\r\n        </PostLinkItem>\r\n      </Frontmatter>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","import { Link } from 'gatsby';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface DataProps {\r\n  // currentPage: number;\r\n  numPages: number;\r\n  tag?: string;\r\n  // baseUrl?: string;\r\n}\r\n\r\nconst PagenationWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 1em 0;\r\n`;\r\n\r\nconst PagenationLink = styled(Link)`\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 0px;\r\n  background-color: var(--button-color);\r\n  border-radius: 2px;\r\n  color: var(--text-color);\r\n  text-decoration: none;\r\n  display: grid;\r\n  place-items: center;\r\n  margin: 0.15em;\r\n\r\n  &:first-child {\r\n    border-top-left-radius: 5px;\r\n    border-bottom-left-radius: 5px;\r\n  }\r\n  &:last-child {\r\n    border-top-right-radius: 5px;\r\n    border-bottom-right-radius: 5px;\r\n  }\r\n`;\r\n\r\nconst Pagenation: React.FC<DataProps> = ({\r\n  // currentPage,\r\n  numPages,\r\n  tag,\r\n  // baseUrl,\r\n}) => {\r\n  // const params = new URLSearchParams(document.location.search);\r\n  // const tag = params.get('tag') ?? '';\r\n  return (\r\n    <PagenationWrapper>\r\n      {Array.from({ length: numPages }).map((_, i) => (\r\n        <PagenationLink\r\n          key={i}\r\n          to={\r\n            i + 1 === 1\r\n              ? `/${tag ? `tag/${tag}` : ''}`\r\n              : `/${tag ? `tag/${tag}` : ''}?page=${i + 1}`\r\n          }\r\n        >\r\n          {i + 1}\r\n        </PagenationLink>\r\n      ))}\r\n    </PagenationWrapper>\r\n  );\r\n};\r\n\r\nexport default Pagenation;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PostCard from './postCard';\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport Layout from './layout';\r\nimport { graphql } from 'gatsby';\r\nimport Pagenation from './pagination';\r\n\r\ninterface IData {\r\n  data: {\r\n    frontmatter: {\r\n      title: string;\r\n      slug: string;\r\n      date: `${string} ${number}, ${number}`;\r\n      description: string;\r\n      cover: {\r\n        childImageSharp: {\r\n          gatsbyImageData: IGatsbyImageData;\r\n        };\r\n      };\r\n    };\r\n    id: string;\r\n  }[];\r\n  // pageContext: {\r\n  //   limit: number;\r\n  //   skip: number;\r\n  //   numPages: number;\r\n  //   currentPage: number;\r\n  // };\r\n  // currentPage: number;\r\n  numPages: number;\r\n  tag?: string;\r\n  // baseUrl?: string;\r\n}\r\n\r\nconst Posts = styled.div`\r\n  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n  display: grid;\r\n  gap: 32px;\r\n  /* flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center; */\r\n`;\r\n\r\nconst PostList: React.FC<IData> = ({\r\n  data,\r\n  // currentPage,\r\n  numPages,\r\n  tag,\r\n  // baseUrl,\r\n}) => {\r\n  return (\r\n    // <Layout pageTitle=\"\">\r\n    <>\r\n      <Posts>\r\n        {data.map((node, i) => (\r\n          <PostCard\r\n            // key={node.id}\r\n            key={i}\r\n            slug={node.frontmatter.slug}\r\n            title={node.frontmatter.title}\r\n            date={node.frontmatter.date}\r\n            excerpt={node.frontmatter.description}\r\n            cover={\r\n              node.frontmatter.cover?.childImageSharp.gatsbyImageData ??\r\n              undefined\r\n            }\r\n          />\r\n        ))}\r\n      </Posts>\r\n      <Pagenation tag={tag} numPages={numPages} />\r\n    </>\r\n    // </Layout>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { graphql, HeadFC, PageProps } from 'gatsby';\r\nimport Layout from '../components/layout';\r\nimport Seo from '../components/seo';\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport PostList from '../components/postList';\r\n\r\ninterface IPosts {\r\n  frontmatter: {\r\n    title: string;\r\n    slug: string;\r\n    date: `${string} ${number}, ${number}`;\r\n    description: string;\r\n    tag?: string;\r\n    cover: {\r\n      childImageSharp: {\r\n        gatsbyImageData: IGatsbyImageData;\r\n      };\r\n    };\r\n  };\r\n  id: string;\r\n}\r\n\r\ninterface DataProps {\r\n  allMarkdownRemark: {\r\n    nodes: IPosts[];\r\n  };\r\n}\r\n\r\ninterface PageContextProps {\r\n  limit: number;\r\n  skip: number;\r\n  tag: string;\r\n  tagNumPages: number;\r\n}\r\n\r\nconst CategoryPage = ({\r\n  pageContext,\r\n  data,\r\n}: PageProps<DataProps, PageContextProps>) => {\r\n  const { tagNumPages } = pageContext;\r\n\r\n  // const [posts, setPosts] = useState<IPosts[]>([]);\r\n\r\n  let posts;\r\n\r\n  if (document) {\r\n    const params = new URLSearchParams(document.location.search);\r\n    const page = parseInt(params.get('page') ?? '1');\r\n    // const tag = params.get('tag') ?? '';\r\n    posts = data.allMarkdownRemark.nodes\r\n      // .filter((node) => (tag ? node.frontmatter.tag === tag : true))\r\n      .slice(\r\n        (page - 1) * pageContext.limit,\r\n        (page - 1) * pageContext.limit + pageContext.limit\r\n      );\r\n  }\r\n  const pagenation = {\r\n    numPages: tagNumPages,\r\n  };\r\n\r\n  return (\r\n    <Layout pageTitle={pageContext.tag}>\r\n      <PostList data={posts || []} tag={pageContext.tag} {...pagenation} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const Head: HeadFC<{}, PageContextProps> = ({ pageContext }) => (\r\n  <Seo title={pageContext.tag} />\r\n);\r\n\r\nexport default CategoryPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query CategoryPage($tag: String!) {\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: frontmatter___date }\r\n      filter: { frontmatter: { tag: { eq: $tag } } }\r\n    ) {\r\n      nodes {\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"MMM D, YYYY\")\r\n          slug\r\n          description\r\n          tag\r\n          cover {\r\n            childImageSharp {\r\n              gatsbyImageData(width: 200, height: 200)\r\n            }\r\n          }\r\n        }\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["PostLinkItem","styled","Link","withConfig","Card","Frontmatter","Excerpt","Posted","Image","GatsbyImage","slug","title","date","excerpt","cover","image","getImage","React","to","alt","PagenationWrapper","PagenationLink","numPages","tag","Array","from","length","map","_","i","key","Posts","data","node","PostCard","frontmatter","description","_node$frontmatter$cov2","childImageSharp","gatsbyImageData","undefined","Pagenation","Head","pageContext","Seo","posts","tagNumPages","document","params","URLSearchParams","location","search","page","parseInt","get","allMarkdownRemark","nodes","slice","limit","pagenation","Layout","pageTitle","PostList"],"sourceRoot":""}